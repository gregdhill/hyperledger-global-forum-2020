//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
interface Provider<Tx> {
    deploy(msg: Tx, callback: (err: Error, addr: Uint8Array) => void): void;
    call(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    listen(signature: string, address: string, callback: (err: Error, event: any) => void): Readable;
    payload(data: string, address?: string): Tx;
    encode(name: string, inputs: string[], ...args: any[]): string;
    decode(data: Uint8Array, outputs: string[]): any;
}
function Call<Tx, Output>(client: Provider<Tx>, addr: string, data: string, callback: (exec: Uint8Array) => Output): Promise<Output> {
    const payload = client.payload(data, addr);
    return new Promise((resolve, reject) => {
        client.call(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); });
    });
}
function Replace(bytecode: string, name: string, address: string): string {
    address = address + Array(40 - address.length + 1).join("0");
    const truncated = name.slice(0, 36);
    const label = "__" + truncated + Array(37 - truncated.length).join("_") + "__";
    while (bytecode.indexOf(label) >= 0)
        bytecode = bytecode.replace(label, address);
    return bytecode;
}
export module Mintable {
    export function Deploy<Tx>(client: Provider<Tx>): Promise<string> {
        let bytecode = "60806040523480156200001157600080fd5b506040518060400160405280600681526020017f546f6b656e7300000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f544b4e00000000000000000000000000000000000000000000000000000000008152508181620000986301ffc9a760e01b6200011c60201b60201c565b620000b06380ac58cd60e01b6200011c60201b60201c565b620000c863780e9d6360e01b6200011c60201b60201c565b8160099080519060200190620000e092919062000225565b5080600a9080519060200190620000f992919062000225565b5062000112635b5e139f60e01b6200011c60201b60201c565b50505050620002d4565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415620001b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433136353a20696e76616c696420696e746572666163652069640000000081525060200191505060405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200026857805160ff191683800117855562000299565b8280016001018555821562000299579182015b82811115620002985782518255916020019190600101906200027b565b5b509050620002a89190620002ac565b5090565b620002d191905b80821115620002cd576000816000905550600101620002b3565b5090565b90565b6127b080620002e46000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80634f6ccce7116100a257806395d89b411161007157806395d89b41146105f4578063a22cb46514610677578063b88d4fde146106c7578063c87b56dd146107cc578063e985e9c51461087357610116565b80634f6ccce7146104695780636352211e146104ab5780636c0360eb1461051957806370a082311461059c57610116565b806318160ddd116100e957806318160ddd146102bf57806323b872dd146102dd5780632f745c591461034b57806340c10f19146103ad57806342842e0e146103fb57610116565b806301ffc9a71461011b57806306fdde0314610180578063081812fc14610203578063095ea7b314610271575b600080fd5b6101666004803603602081101561013157600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506108ef565b604051808215151515815260200191505060405180910390f35b610188610956565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101c85780820151818401526020810190506101ad565b50505050905090810190601f1680156101f55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61022f6004803603602081101561021957600080fd5b81019080803590602001909291905050506109f8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102bd6004803603604081101561028757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a93565b005b6102c7610c7a565b6040518082815260200191505060405180910390f35b610349600480360360608110156102f357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c87565b005b6103976004803603604081101561036157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cfd565b6040518082815260200191505060405180910390f35b6103f9600480360360408110156103c357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610dbc565b005b6104676004803603606081101561041157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610dca565b005b6104956004803603602081101561047f57600080fd5b8101908080359060200190929190505050610dea565b6040518082815260200191505060405180910390f35b6104d7600480360360208110156104c157600080fd5b8101908080359060200190929190505050610e6a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610521610f32565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610561578082015181840152602081019050610546565b50505050905090810190601f16801561058e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6105de600480360360208110156105b257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fd4565b6040518082815260200191505060405180910390f35b6105fc6110a9565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561063c578082015181840152602081019050610621565b50505050905090810190601f1680156106695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106c56004803603604081101561068d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061114b565b005b6107ca600480360360808110156106dd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561074457600080fd5b82018360208201111561075657600080fd5b8035906020019184600183028401116401000000008311171561077857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611303565b005b6107f8600480360360208110156107e257600080fd5b810190808035906020019092919050505061137b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561083857808201518184015260208101905061081d565b50505050905090810190601f1680156108655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6108d56004803603604081101561088957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061157d565b604051808215151515815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109ee5780601f106109c3576101008083540402835291602001916109ee565b820191906000526020600020905b8154815290600101906020018083116109d157829003601f168201915b5050505050905090565b6000610a0382611611565b610a58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061267a602c913960400191505060405180910390fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a9e82610e6a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b25576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806126fe6021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b44611683565b73ffffffffffffffffffffffffffffffffffffffff161480610b735750610b7281610b6d611683565b61157d565b5b610bc8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001806125ef6038913960400191505060405180910390fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000600780549050905090565b610c98610c92611683565b8261168b565b610ced576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061271f6031913960400191505060405180910390fd5b610cf883838361177f565b505050565b6000610d0883610fd4565b8210610d5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180612542602b913960400191505060405180910390fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610da957fe5b9060005260206000200154905092915050565b610dc682826117a3565b5050565b610de583838360405180602001604052806000815250611303565b505050565b6000610df4610c7a565b8210610e4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180612750602c913960400191505060405180910390fd5b60078281548110610e5857fe5b90600052602060002001549050919050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f29576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806126516029913960400191505060405180910390fd5b80915050919050565b6060600b8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fca5780601f10610f9f57610100808354040283529160200191610fca565b820191906000526020600020905b815481529060010190602001808311610fad57829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561105b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612627602a913960400191505060405180910390fd5b6110a2600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206117c4565b9050919050565b6060600a8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111415780601f1061111657610100808354040283529160200191611141565b820191906000526020600020905b81548152906001019060200180831161112457829003601f168201915b5050505050905090565b611153611683565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552433732313a20617070726f766520746f2063616c6c65720000000000000081525060200191505060405180910390fd5b8060046000611201611683565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166112ae611683565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b61131461130e611683565b8361168b565b611369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061271f6031913960400191505060405180910390fd5b611375848484846117d2565b50505050565b606061138682611611565b6113db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806126cf602f913960400191505060405180910390fd5b6060600c60008481526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114845780601f1061145957610100808354040283529160200191611484565b820191906000526020600020905b81548152906001019060200180831161146757829003601f168201915b505050505090506000815114156114ad5760405180602001604052806000815250915050611578565b600b81604051602001808380546001816001161561010002031660029004801561150e5780601f106114ec57610100808354040283529182019161150e565b820191906000526020600020905b8154815290600101906020018083116114fa575b505082805190602001908083835b6020831061153f578051825260208201915060208101905060208303925061151c565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529150505b919050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600033905090565b600061169682611611565b6116eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806125c3602c913960400191505060405180910390fd5b60006116f683610e6a565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061176557508373ffffffffffffffffffffffffffffffffffffffff1661174d846109f8565b73ffffffffffffffffffffffffffffffffffffffff16145b806117765750611775818561157d565b5b91505092915050565b61178a838383611844565b6117948382611a9f565b61179e8282611c3d565b505050565b6117ad8282611d04565b6117b78282611c3d565b6117c081611f1c565b5050565b600081600001549050919050565b6117dd84848461177f565b6117e984848484611f68565b61183e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603281526020018061256d6032913960400191505060405180910390fd5b50505050565b8273ffffffffffffffffffffffffffffffffffffffff1661186482610e6a565b73ffffffffffffffffffffffffffffffffffffffff16146118d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806126a66029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611956576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602481526020018061259f6024913960400191505060405180910390fd5b61195f816122a4565b6119a6600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612362565b6119ed600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612385565b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000611af76001600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905061239b90919063ffffffff16565b9050600060066000848152602001908152602001600020549050818114611be4576000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110611b6457fe5b9060005260206000200154905080600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110611bbc57fe5b9060005260206000200181905550816006600083815260200190815260200160002081905550505b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480919060019003611c3691906124f0565b5050505050565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506006600083815260200190815260200160002081905550600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611da7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4552433732313a206d696e7420746f20746865207a65726f206164647265737381525060200191505060405180910390fd5b611db081611611565b15611e23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081525060200191505060405180910390fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611ebc600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612385565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6007805490506008600083815260200190815260200160002081905550600781908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b6000611f898473ffffffffffffffffffffffffffffffffffffffff166123e5565b611f96576001905061229c565b600060608573ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1663150b7a02905060e01b611fda611683565b898888604051602401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561208a57808201518184015260208101905061206f565b50505050905090810190601f1680156120b75780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061214f578051825260208201915060208101905060208303925061212c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146121b1576040519150601f19603f3d011682016040523d82523d6000602084013e6121b6565b606091505b509150915081612224576000815111156121d35780518082602001fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603281526020018061256d6032913960400191505060405180910390fd5b600081806020019051602081101561223b57600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161493505050505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461235f5760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b61237a6001826000015461239b90919063ffffffff16565b816000018190555050565b6001816000016000828254019250508190555050565b60006123dd83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612430565b905092915050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f915080821415801561242757506000801b8214155b92505050919050565b60008383111582906124dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124a2578082015181840152602081019050612487565b50505050905090810190601f1680156124cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b81548183558181111561251757818360005260206000209182019101612516919061251c565b5b505050565b61253e91905b8082111561253a576000816000905550600101612522565b5090565b9056fe455243373231456e756d657261626c653a206f776e657220696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243373231456e756d657261626c653a20676c6f62616c20696e646578206f7574206f6620626f756e6473a265627a7a723158200dc6f682f49e1fb2342ffba392f42418b79e67164a4a099bd140dc61a9c26a5f64736f6c634300050c0032";
        const data = bytecode + client.encode("", []);
        const payload = client.payload(data);
        return new Promise((resolve, reject) => {
            client.deploy(payload, (err, addr) => {
                if (err)
                    reject(err);
                else {
                    const address = Buffer.from(addr).toString("hex").toUpperCase();
                    resolve(address);
                }
            });
        });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        Approval(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Approval", this.address, callback); }
        ApprovalForAll(callback: (err: Error, event: any) => void): Readable { return this.client.listen("ApprovalForAll", this.address, callback); }
        Transfer(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Transfer", this.address, callback); }
        approve(to: string, tokenId: number) {
            const data = Encode(this.client).approve(to, tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).approve();
            });
        }
        balanceOf(owner: string) {
            const data = Encode(this.client).balanceOf(owner);
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).balanceOf();
            });
        }
        baseURI() {
            const data = Encode(this.client).baseURI();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).baseURI();
            });
        }
        getApproved(tokenId: number) {
            const data = Encode(this.client).getApproved(tokenId);
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).getApproved();
            });
        }
        isApprovedForAll(owner: string, operator: string) {
            const data = Encode(this.client).isApprovedForAll(owner, operator);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).isApprovedForAll();
            });
        }
        mint(to: string, tokenId: number) {
            const data = Encode(this.client).mint(to, tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).mint();
            });
        }
        name() {
            const data = Encode(this.client).name();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).name();
            });
        }
        ownerOf(tokenId: number) {
            const data = Encode(this.client).ownerOf(tokenId);
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ownerOf();
            });
        }
        safeTransferFrom(from: string | string, to: string | string, tokenId: number | number, _data: Buffer) {
            const data = Encode(this.client).safeTransferFrom(from, to, tokenId, _data);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).safeTransferFrom();
            });
        }
        setApprovalForAll(to: string, approved: boolean) {
            const data = Encode(this.client).setApprovalForAll(to, approved);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setApprovalForAll();
            });
        }
        supportsInterface(interfaceId: Buffer) {
            const data = Encode(this.client).supportsInterface(interfaceId);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).supportsInterface();
            });
        }
        symbol() {
            const data = Encode(this.client).symbol();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).symbol();
            });
        }
        tokenByIndex(index: number) {
            const data = Encode(this.client).tokenByIndex(index);
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).tokenByIndex();
            });
        }
        tokenOfOwnerByIndex(owner: string, index: number) {
            const data = Encode(this.client).tokenOfOwnerByIndex(owner, index);
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).tokenOfOwnerByIndex();
            });
        }
        tokenURI(tokenId: number) {
            const data = Encode(this.client).tokenURI(tokenId);
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).tokenURI();
            });
        }
        totalSupply() {
            const data = Encode(this.client).totalSupply();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).totalSupply();
            });
        }
        transferFrom(from: string, to: string, tokenId: number) {
            const data = Encode(this.client).transferFrom(from, to, tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transferFrom();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        approve: (to: string, tokenId: number) => { return client.encode("095EA7B3", ["address", "uint256"], to, tokenId); },
        balanceOf: (owner: string) => { return client.encode("70A08231", ["address"], owner); },
        baseURI: () => { return client.encode("6C0360EB", []); },
        getApproved: (tokenId: number) => { return client.encode("081812FC", ["uint256"], tokenId); },
        isApprovedForAll: (owner: string, operator: string) => { return client.encode("E985E9C5", ["address", "address"], owner, operator); },
        mint: (to: string, tokenId: number) => { return client.encode("40C10F19", ["address", "uint256"], to, tokenId); },
        name: () => { return client.encode("06FDDE03", []); },
        ownerOf: (tokenId: number) => { return client.encode("6352211E", ["uint256"], tokenId); },
        safeTransferFrom: (from: string | string, to: string | string, tokenId: number | number, _data: Buffer) => {
            if (typeof from === "string" && typeof to === "string" && typeof tokenId === "string")
                return client.encode("42842E0E", ["address", "address", "uint256"], from, to, tokenId);
            if (typeof from === "string" && typeof to === "string" && typeof tokenId === "string" && typeof _data === "string")
                return client.encode("B88D4FDE", ["address", "address", "uint256", "bytes"], from, to, tokenId, _data);
        },
        setApprovalForAll: (to: string, approved: boolean) => { return client.encode("A22CB465", ["address", "bool"], to, approved); },
        supportsInterface: (interfaceId: Buffer) => { return client.encode("01FFC9A7", ["bytes4"], interfaceId); },
        symbol: () => { return client.encode("95D89B41", []); },
        tokenByIndex: (index: number) => { return client.encode("4F6CCCE7", ["uint256"], index); },
        tokenOfOwnerByIndex: (owner: string, index: number) => { return client.encode("2F745C59", ["address", "uint256"], owner, index); },
        tokenURI: (tokenId: number) => { return client.encode("C87B56DD", ["uint256"], tokenId); },
        totalSupply: () => { return client.encode("18160DDD", []); },
        transferFrom: (from: string, to: string, tokenId: number) => { return client.encode("23B872DD", ["address", "address", "uint256"], from, to, tokenId); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        approve: (): void => { return; },
        balanceOf: (): [number] => { return client.decode(data, ["uint256"]); },
        baseURI: (): [string] => { return client.decode(data, ["string"]); },
        getApproved: (): [string] => { return client.decode(data, ["address"]); },
        isApprovedForAll: (): [boolean] => { return client.decode(data, ["bool"]); },
        mint: (): void => { return; },
        name: (): [string] => { return client.decode(data, ["string"]); },
        ownerOf: (): [string] => { return client.decode(data, ["address"]); },
        safeTransferFrom: (): void => { return; },
        setApprovalForAll: (): void => { return; },
        supportsInterface: (): [boolean] => { return client.decode(data, ["bool"]); },
        symbol: (): [string] => { return client.decode(data, ["string"]); },
        tokenByIndex: (): [number] => { return client.decode(data, ["uint256"]); },
        tokenOfOwnerByIndex: (): [number] => { return client.decode(data, ["uint256"]); },
        tokenURI: (): [string] => { return client.decode(data, ["string"]); },
        totalSupply: (): [number] => { return client.decode(data, ["uint256"]); },
        transferFrom: (): void => { return; }
    }; };
}